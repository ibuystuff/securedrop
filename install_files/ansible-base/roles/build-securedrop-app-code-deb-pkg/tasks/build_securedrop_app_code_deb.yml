---
- name: Install pip wheel.
  pip:
    name: wheel
  tags: pip

- name: Copy install_files/securedrop-app-code dir to build path.
  synchronize:
    src: "{{ role_path }}/../../../securedrop-app-code/"
    dest: "{{ securedrop_app_code_deb_dir }}"
    delete: yes
    recursive: yes

- debug: var=securedrop_code

- name: Install debhelper (move to Dockerfile)
  apt:
    name: debhelper
    state: present
    update_cache: yes
    cache_valid_time: 3600

- name: Copy app code to build directory.
  synchronize:
    src: "{{ role_path }}/../../../../securedrop/"
    dest: "{{ securedrop_code_filtered }}"
    recursive: yes
    delete: yes
    rsync_opts: "{{ securedrop_app_rsync_opts }}"

- include: sass.yml

- name: Create pip wheel archive for Debian package requirements.
  shell: |
    pip wheel \
      -r {{ securedrop_code_filtered }}/requirements/securedrop-app-code-requirements.txt \
      -w {{ securedrop_app_code_deb_dir }}/var/securedrop/wheelhouse 2>&1 | tee /tmp/w.out
      ! grep -i --quiet 'Failed to build' /tmp/w.out
  tags: pip

- include: translations.yml

- name: Create apparmor.d directory in build path.
  file:
    state: directory
    dest: "{{ securedrop_app_code_deb_dir }}/etc/apparmor.d"
  tags: apparmor

- name: Copy AppArmor profiles to build path.
  copy:
    src: "{{ item }}"
    dest: "{{ securedrop_app_code_deb_dir }}/etc/apparmor.d/{{ item }}"
  with_items: "{{ apparmor_profiles }}"
  tags: apparmor

- name: Build securedrop-app-code Debian package.
  command: dpkg-buildpackage -us -uc
  args:
    chdir: "{{ securedrop_app_code_deb_dir }}"

- name: Find newly built Debian package
  find:
    paths:
      - "{{ securedrop_app_code_deb_dir }}/../"
    patterns:
      - '*.deb'
  register: securedrop_deb_package_find_results

- name: Fetch newly built Debian packages back to localhost.
  fetch:
    src: "{{ item.path }}"
    dest: "{{ ossec_build_deb_package_local_dest_dir }}"
    flat: yes
    fail_on_missing: yes
  with_items: "{{ securedrop_deb_package_find_results.files }}"
